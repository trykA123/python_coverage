# GitHub Actions configuration **EXAMPLE**,
# MODIFY IT ACCORDING TO YOUR NEEDS!
# Reference: https://docs.github.com/en/actions

name: tests

on:
  push:
    branches: ["master"]
  pull_request:
    branches: ["master"]

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      wheel-distribution: ${{ steps.wheel-distribution.outputs.path }}
    steps:
      - uses: actions/checkout@v3
        with: { fetch-depth: 0 } # deep clone for setuptools-scm
      - uses: actions/setup-python@v4
        id: setup-python
        with: { python-version: "3.11" }
      - name: Build package distribution files
        run: >-
          pipx run --python '${{ steps.setup-python.outputs.python-path }}'
          tox -e clean,build
      - name: Record the path of wheel distribution
        id: wheel-distribution
        run: echo "path=$(ls dist/*.whl)" >> $GITHUB_OUTPUT
      - name: Store the distribution files for use in other stages
        # `tests` and `publish` will use the same pre-built distributions,
        # so we make sure to release the exact same package that was tested
        uses: actions/upload-artifact@v3
        with:
          name: python-distribution-files
          path: dist/
          retention-days: 1

  # test:
  #   needs: prepare
  #   strategy:
  #     matrix:
  #       python:
  #         - "3.7" # oldest Python supported by PSF
  #         - "3.11" # newest Python that is stable
  #       platform:
  #         - ubuntu-latest
  #         - macos-latest
  #         - windows-latest
  #   runs-on: ${{ matrix.platform }}
  #   steps:
  #     - uses: actions/checkout@v3
  #     - uses: actions/setup-python@v4
  #       id: setup-python
  #       with:
  #         python-version: ${{ matrix.python }}
  #     - name: Retrieve pre-built distribution files
  #       uses: actions/download-artifact@v3
  #       with: { name: python-distribution-files, path: dist/ }
  #     - name: Run tests
  #       run: >-
  #         pipx run --python '${{ steps.setup-python.outputs.python-path }}'
  #         tox --installpkg '${{ needs.prepare.outputs.wheel-distribution }}'
  #         -- -rFEx --durations 10 --color yes  # pytest args
  #     - name: Generate coverage report
  #       run: pipx run coverage lcov -o coverage.lcov
  #     - name: Upload partial coverage report
  #       uses: coverallsapp/github-action@master
  #       with:
  #         path-to-lcov: coverage.lcov
  #         github-token: ${{ secrets.GITHUB_TOKEN }}
  #         flag-name: ${{ matrix.platform }} - py${{ matrix.python }}
  #         parallel: true

  # finalize:
  #   needs: test
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Finalize coverage report
  #       uses: coverallsapp/github-action@master
  #       with:
  #         github-token: ${{ secrets.GITHUB_TOKEN }}
  #         parallel-finished: true

  publish:
    runs-on: ubuntu-latest
    steps:
      - name: Code Coverage Report
        uses: irongut/CodeCoverageSummary@v1.3.0

        with:
          filename: "coverage*.xml"
          badge: true
          fail_below_min: true
          format: markdown
          hide_branch_rate: false
          hide_complexity: true
          indicators: true
          output: both
          thresholds: "40 80"

      - name: Add Coverage PR Comment
        uses: marocchino/sticky-pull-request-comment@v2
        if: always()
        with:
          recreate: true
          path: code-coverage-results.md
